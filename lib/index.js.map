{"version":3,"file":"index.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;;;;;;;;;;ACVA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;;;ACAmC;AACC;AACP;AACU;AACO;;AAE9C,kBAAkB,8CAAY,CAAC,uDAAa,CAAC,sFAAe;;AAE5D;AACA,iBAAiB,oDAAS,CAAC,wDAAqB;;AAEhD;AACA;AACA;AACA,SAAS,8CAAY;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,8CAAY,CAAC;AAC7D;;AAEA,oBAAoB,2CAAS;AAC7B,QAAQ,QAAQ;AAChB;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA,mDAAmD;AACnD;AACA;;AAEA;AACA,SAAS,QAAQ,sCAAsC,IAAI,KAAK,yBAAyB;;AAEzF;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,EAAE;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,+CAAa;AACtB;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;;AAEA;;AAEA,gDAAgD;AAChD;;AAEA,oDAAoD,yBAAyB;AAC7E,QAAQ,QAAQ;AAChB,QAAQ,YAAY;;AAEpB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,SAAS,6BAA6B;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,EAAE;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,sCAAsC;AACtC;AACA;AACA,GAAG,QAAQ;AACX;AACA;AACA;;AAEA,eAAe,kDAAgB;;AAE/B,iEAAe,MAAM,EAAC;;;;;;;UCpJtB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;ACLiC;AACL;;AAE5B;AACA;AACA;AACA,MAAM,yDAAU;AAChB;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP,GAAG;AACH;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACO;;AAEP,kBAAkB,mDAAM,6BAA6B;AACrD;AACA;;AAEA;AACA;AACA,cAAc;AACd,KAAK;AACL;;AAEA;AACA;;AAEA;AACO;;AAEP;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,GAAG;AACH;;AAEA;AACO;;AAEP;;AAEA;AACA;;AAEA;AACA,GAAG;AACH;;AAEA;;;AAGA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,E","sources":["webpack://service-already-running/webpack/universalModuleDefinition","webpack://service-already-running/external node-commonjs \"child_process\"","webpack://service-already-running/external node-commonjs \"node:child_process\"","webpack://service-already-running/external node-commonjs \"node:path\"","webpack://service-already-running/external node-commonjs \"node:process\"","webpack://service-already-running/external node-commonjs \"node:url\"","webpack://service-already-running/external node-commonjs \"node:util\"","webpack://service-already-running/./node_modules/ps-list/index.js","webpack://service-already-running/webpack/bootstrap","webpack://service-already-running/webpack/runtime/compat get default export","webpack://service-already-running/webpack/runtime/define property getters","webpack://service-already-running/webpack/runtime/hasOwnProperty shorthand","webpack://service-already-running/webpack/runtime/make namespace object","webpack://service-already-running/./src/index.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"service-already-running\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"service-already-running\"] = factory();\n\telse\n\t\troot[\"service-already-running\"] = factory();\n})(global, function() {\nreturn ","module.exports = require(\"child_process\");","module.exports = require(\"node:child_process\");","module.exports = require(\"node:path\");","module.exports = require(\"node:process\");","module.exports = require(\"node:url\");","module.exports = require(\"node:util\");","import process from 'node:process';\nimport {promisify} from 'node:util';\nimport path from 'node:path';\nimport {fileURLToPath} from 'node:url';\nimport childProcess from 'node:child_process';\n\nconst __dirname = path.dirname(fileURLToPath(import.meta.url));\n\nconst TEN_MEGABYTES = 1000 * 1000 * 10;\nconst execFile = promisify(childProcess.execFile);\n\nconst windows = async () => {\n\t// Source: https://github.com/MarkTiedemann/fastlist\n\tlet binary;\n\tswitch (process.arch) {\n\t\tcase 'x64':\n\t\t\tbinary = 'fastlist-0.3.0-x64.exe';\n\t\t\tbreak;\n\t\tcase 'ia32':\n\t\t\tbinary = 'fastlist-0.3.0-x86.exe';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tthrow new Error(`Unsupported architecture: ${process.arch}`);\n\t}\n\n\tconst binaryPath = path.join(__dirname, 'vendor', binary);\n\tconst {stdout} = await execFile(binaryPath, {\n\t\tmaxBuffer: TEN_MEGABYTES,\n\t\twindowsHide: true,\n\t});\n\n\treturn stdout\n\t\t.trim()\n\t\t.split('\\r\\n')\n\t\t.map(line => line.split('\\t'))\n\t\t.map(([pid, ppid, name]) => ({\n\t\t\tpid: Number.parseInt(pid, 10),\n\t\t\tppid: Number.parseInt(ppid, 10),\n\t\t\tname,\n\t\t}));\n};\n\nconst nonWindowsMultipleCalls = async (options = {}) => {\n\tconst flags = (options.all === false ? '' : 'a') + 'wwxo';\n\tconst returnValue = {};\n\n\tawait Promise.all(['comm', 'args', 'ppid', 'uid', '%cpu', '%mem'].map(async cmd => {\n\t\tconst {stdout} = await execFile('ps', [flags, `pid,${cmd}`], {maxBuffer: TEN_MEGABYTES});\n\n\t\tfor (let line of stdout.trim().split('\\n').slice(1)) {\n\t\t\tline = line.trim();\n\t\t\tconst [pid] = line.split(' ', 1);\n\t\t\tconst value = line.slice(pid.length + 1).trim();\n\n\t\t\tif (returnValue[pid] === undefined) {\n\t\t\t\treturnValue[pid] = {};\n\t\t\t}\n\n\t\t\treturnValue[pid][cmd] = value;\n\t\t}\n\t}));\n\n\t// Filter out inconsistencies as there might be race\n\t// issues due to differences in `ps` between the spawns\n\treturn Object.entries(returnValue)\n\t\t.filter(([, value]) => value.comm && value.args && value.ppid && value.uid && value['%cpu'] && value['%mem'])\n\t\t.map(([key, value]) => ({\n\t\t\tpid: Number.parseInt(key, 10),\n\t\t\tname: path.basename(value.comm),\n\t\t\tcmd: value.args,\n\t\t\tppid: Number.parseInt(value.ppid, 10),\n\t\t\tuid: Number.parseInt(value.uid, 10),\n\t\t\tcpu: Number.parseFloat(value['%cpu']),\n\t\t\tmemory: Number.parseFloat(value['%mem']),\n\t\t}));\n};\n\nconst ERROR_MESSAGE_PARSING_FAILED = 'ps output parsing failed';\n\nconst psFields = 'pid,ppid,uid,%cpu,%mem,comm,args';\n\nconst psOutputRegex = /^[ \\t]*(?<pid>\\d+)[ \\t]+(?<ppid>\\d+)[ \\t]+(?<uid>\\d+)[ \\t]+(?<cpu>\\d+\\.\\d+)[ \\t]+(?<memory>\\d+\\.\\d+)[ \\t]+/;\n\nconst nonWindowsSingleCall = async (options = {}) => {\n\tconst flags = options.all === false ? 'wwxo' : 'awwxo';\n\n\tconst promise = execFile('ps', [flags, psFields], {maxBuffer: TEN_MEGABYTES});\n\tconst {stdout} = await promise;\n\tconst {pid: psPid} = promise.child;\n\n\tconst lines = stdout.trim().split('\\n');\n\tlines.shift();\n\n\tlet psIndex;\n\tlet commPosition;\n\tlet argsPosition;\n\n\tconst processes = lines.map((line, index) => {\n\t\tconst match = psOutputRegex.exec(line);\n\t\tif (match === null) {\n\t\t\tthrow new Error(ERROR_MESSAGE_PARSING_FAILED);\n\t\t}\n\n\t\tconst {pid, ppid, uid, cpu, memory} = match.groups;\n\n\t\tconst processInfo = {\n\t\t\tpid: Number.parseInt(pid, 10),\n\t\t\tppid: Number.parseInt(ppid, 10),\n\t\t\tuid: Number.parseInt(uid, 10),\n\t\t\tcpu: Number.parseFloat(cpu),\n\t\t\tmemory: Number.parseFloat(memory),\n\t\t\tname: undefined,\n\t\t\tcmd: undefined,\n\t\t};\n\n\t\tif (processInfo.pid === psPid) {\n\t\t\tpsIndex = index;\n\t\t\tcommPosition = line.indexOf('ps', match[0].length);\n\t\t\targsPosition = line.indexOf('ps', commPosition + 2);\n\t\t}\n\n\t\treturn processInfo;\n\t});\n\n\tif (psIndex === undefined || commPosition === -1 || argsPosition === -1) {\n\t\tthrow new Error(ERROR_MESSAGE_PARSING_FAILED);\n\t}\n\n\tconst commLength = argsPosition - commPosition;\n\tfor (const [index, line] of lines.entries()) {\n\t\tprocesses[index].name = line.slice(commPosition, commPosition + commLength).trim();\n\t\tprocesses[index].cmd = line.slice(argsPosition).trim();\n\t}\n\n\tprocesses.splice(psIndex, 1);\n\treturn processes;\n};\n\nconst nonWindows = async (options = {}) => {\n\ttry {\n\t\treturn await nonWindowsSingleCall(options);\n\t} catch { // If the error is not a parsing error, it should manifest itself in multicall version too.\n\t\treturn nonWindowsMultipleCalls(options);\n\t}\n};\n\nconst psList = process.platform === 'win32' ? windows : nonWindows;\n\nexport default psList;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","\nimport child from 'child_process'\nimport psList from 'ps-list'\n\n// ----------------------------------------------------------------------------\nfunction exec(command) {\n  return new Promise(function(resolve, reject) {\n      child.exec(command, (error, stdout, stderr) => {\n          if (error) {\n              reject(error);\n              return;\n          }\n\n          resolve(stdout.trim());\n      });\n  });\n}\n\n// ----------------------------------------------------------------------------\nconst pwdx = async (pid) => {\n\n  if (process.platform != 'linux') {\n    throw new Error(\"Non-linux OS not supported. (need pwdx)\")\n  }\n\n  const line = await exec('pwdx '+pid);\n  const value = line.slice(line.indexOf(': ')+2).trim()\n  \n  return value\n\n};\n\n// ----------------------------------------------------------------------------\nfunction has(str, arr) {\n  return arr.some(word => str.includes(word))\n}\n\n//  const systemCmds = ['chrome', 'vscode', '/code', 'libexec', 'kthread', 'kworker', 'fusermount']\n// var b = a.filter(o => ( !has(o.cmd, systemCmds) && o.cmd.includes('node')))\n\n// ----------------------------------------------------------------------------\nexport const scanForSame = async () => {\n\n  const a = await psList();                          // List all processes alive\n  const me = a.filter(o => o.pid === process.pid)[0]\n  const others = a.filter(o => (o.cmd == me.cmd) )\n\n  const unresolvedPromises = others.map(async o => {\n      const wDir = await pwdx(o.pid)\n      return {pid: o.pid, cmd: o.cmd, cwd: wDir}\n    });\n  const results = await Promise.all(unresolvedPromises);\n\n  return results\n}\n\n// ----------------------------------------------------------------------------\nexport const killOthers = async () => {\n\n  const all = await scanForSame()\n\n  all.forEach(o => {\n    const thisGuy = (o.pid === process.pid) \n\n    if (!thisGuy) {\n      console.log('KILLING:', o.pid, o.cmd, o.cwd)\n      process.kill(o.pid)\n    }\n\n  })\n}\n\n// ----------------------------------------------------------------------------\nexport const listAll = async () => {\n\n  const all = await scanForSame()\n\n  all.forEach(o => {\n    const thisGuy = (o.pid === process.pid) ? '              <<< This program' : ''\n\n    console.log(o.pid, o.cmd, o.cwd, thisGuy)\n  })\n}\n\n// listAll()\n\n\n/*\nprocess.versions.node    '16.14.0',\nprocess.platform         'linux',\nprocess.env.*\n\nprocess.argv\n\n'comm', 'args', 'ppid', 'uid', '%cpu', '%mem'\nps wwxo pid,args\n*/"],"names":[],"sourceRoot":""}